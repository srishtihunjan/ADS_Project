import java.util.ArrayList;

public class Minheap {
	int arraysize;

	public ArrayList<Node> make_heap(ArrayList<Node> node_array) {
		arraysize = node_array.size();
		for (int i = node_array.size() / 2 - 1; i >= 0; i--)

		{
			min_heapify(node_array, i);
		}

		return node_array;
	}

	public void min_heapify(ArrayList<Node> node_array, int i) {
		int l = i * 2 + 1;
		int r = i * 2 + 2;
		int small;
		if (l <= arraysize - 1 && node_array.get(l).compareTo(node_array.get(i)) == 1) {
			small = l;
		} else {
			small = i;
		}
		if (r <= arraysize - 1 && node_array.get(r).compareTo(node_array.get(small)) == 1) {
			small = r;
		}
		if (small != i) {
			Node temp = node_array.get(i);
			node_array.set(i, node_array.get(small));
			node_array.set(small, temp);
			min_heapify(node_array, small);
		}

	}

}